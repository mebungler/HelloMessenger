<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:HelloMessanger">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Hoverless Button -->
    <Style TargetType="Button" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SystemIcon Button-->
    <Style TargetType="Button" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"></Setter>
        <Setter Property="Padding" Value="10"></Setter>
    </Style>

    <!--ControlButtons-->
    <Style TargetType="Button" x:Key="ControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"></Setter>
        <Setter Property="Foreground" Value="{StaticResource MainForegroundBrush}"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource FontAwesome}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource ActiveUIElementBrush}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Window close button-->
    <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource ControlButton}">
        <Setter Property="FontSize" Value="15" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DefaultButton-->
    <Style TargetType="Button" BasedOn="{StaticResource BaseStyle}" x:Key="DefaultButton">
        <Setter Property="Background" Value="{StaticResource DarkerUIElementBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource WhiteForegroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"></Setter>
        <Setter Property="FontFamily" Value="None"></Setter>
        <Setter Property="Padding" Value="50 10"></Setter>
        <Setter Property="Margin" Value="0 10"></Setter>
        <Setter Property="local:IsBusyProperty.Value" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock 
                                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibiltyValueConvertor}}"
                                FontFamily="{TemplateBinding FontFamily}" 
                                Text="{TemplateBinding Content}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <TextBlock  
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   FontSize="{TemplateBinding FontSize}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibiltyValueConvertor},ConverterParameter=true}"
                                   >
                                <TextBlock.Resources>
                                    <Style TargetType="{x:Type TextBlock}">

                                            <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
                                            <Setter Property="Text" Value="&#xf110;" />
                                            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                                            <Setter Property="RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform></RotateTransform>
                                                </Setter.Value>
                                            </Setter>

                                            <Style.Resources>
                                                <Storyboard x:Key="Spin">
                                                    <DoubleAnimation
                                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                                    From="0"
                                                                    To="360"
                                                                    Duration="0:0:2"
                                                                    RepeatBehavior="Forever" />
                                                </Storyboard>
                                            </Style.Resources>

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsVisible}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard Name="SpinStoryboard" Storyboard="{StaticResource Spin}" />
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <RemoveStoryboard BeginStoryboardName="SpinStoryboard" />
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Resources>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource ActiveUIElement}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="border" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource DarkerUIElement}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="border" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <!--TODO:Animation when pressed-->
                        <!--
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DisabledColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Text Button-->
    <Style x:Key="TextButton" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="{StaticResource WhiteForegroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource RobotoMedium}"></Setter>
        <Setter Property="Padding" Value="50 10"></Setter>
        <Setter Property="Margin" Value="0 10"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <TextBlock FontFamily="{TemplateBinding FontFamily}" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  Property="Foreground" Value="{StaticResource ActiveUIElementBrush}"/>
                        </Trigger>
                        <!--TODO:Animation when pressed-->
                        <!--
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Delault smaller buttons-->
    <Style x:Key="SmallerDefaultButton" TargetType="Button" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource DarkerUIElementBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource WhiteForegroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock 
                                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibiltyValueConvertor}}"
                                FontFamily="{TemplateBinding FontFamily}" Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <TextBlock
                                Text="Busy"
                                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibiltyValueConvertor}, ConverterParameter=True}"></TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource ActiveUIElement}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="border" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource DarkerUIElement}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="border" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <!--TODO:Animation when pressed-->
                        <!--
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DisabledColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Music Control buttons-->
    <Style x:Key="MControlButton" TargetType="Button">
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource LighterUIElementBrush}"></Setter>
        <Setter Property="Background" Value="{StaticResource LighterBackgroundBrush}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="0" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource FontAwesome}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource AccentBrush}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Menu buttons-->
    <Style TargetType="Button" x:Key="MenuButtons">
        <Setter Property="Margin" Value="0,10"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource AccentBrush}"></Setter>
        <Setter Property="Background" Value="{StaticResource DarkBackgroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
    </Style>

    <!--IconButton-->
    <Style TargetType="Button" BasedOn="{StaticResource BaseStyle}" x:Key="IconButton">
        <Setter Property="Background" Value="{StaticResource LighterBackgroundBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource WhiteForegroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}"></Setter>
        <Setter Property="Padding" Value="30"></Setter>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        x:Name="container" 
                        Background="{StaticResource LighterBackgroundBrush}">
                        <Grid>
                            <Viewbox>
                                <TextBlock 
                                FontFamily="{TemplateBinding FontFamily}" 
                                Text="{TemplateBinding Content}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Foreground="{TemplateBinding Foreground}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource ActiveUIElement}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="container" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource LighterBackground}" Storyboard.TargetProperty="Background.Color" Storyboard.TargetName="container" Duration="0:0:0.3"></ColorAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="container" Value="{StaticResource DisabledColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>